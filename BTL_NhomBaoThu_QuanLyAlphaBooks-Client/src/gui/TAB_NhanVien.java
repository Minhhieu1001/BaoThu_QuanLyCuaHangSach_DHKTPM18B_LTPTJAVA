/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import bus.NhanVien_BUS;

import entities.NhanVien;
import ultilities.ImageProcessing;
import ultilities.ProcessingEnumDBForQuy;
import ultilities.RegexPattern;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.KeyStroke;

public class TAB_NhanVien extends javax.swing.JPanel {

    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private ImageIcon imgThem;
    private boolean isEditing;
    NhanVien_BUS nhanvienBus = new NhanVien_BUS();
    private static int maDem = 1;

    /**
     * Creates new form TAB_NhanVien
     */
    public TAB_NhanVien() {

        initComponents();

        loadNhanVienTable();
        showTuBangLenForm();
        phimTat();
        txtMa.setEditable(false);
        customizeTable();
        txtMa.setText(phatSinhMaNhanVien());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Container = new javax.swing.JPanel();
        jLabel1 = new JLabel();
        Left = new javax.swing.JPanel();
        jLabel3 = new JLabel();
        txtMa = new javax.swing.JTextField();
        jLabel2 = new JLabel();
        txtTaiKhoan = new javax.swing.JTextField();
        jLabel4 = new JLabel();
        txtTen = new javax.swing.JTextField();
        jLabel5 = new JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel6 = new JLabel();
        txtSDT = new javax.swing.JTextField();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        txtDiaChi = new javax.swing.JTextField();
        jLabel9 = new JLabel();
        jLabel10 = new JLabel();
        jLabel11 = new JLabel();
        cboGioiTinh = new javax.swing.JComboBox<>();
        cboChucVu = new javax.swing.JComboBox<>();
        txtNgay = new com.toedter.calendar.JDateChooser();
        txtMatKhau = new javax.swing.JPasswordField();
        btnXoaRong = new JButton();
        btnHienThiBang = new JButton();
        right = new javax.swing.JPanel();
        jLabel12 = new JLabel();
        txtMa1 = new javax.swing.JTextField();
        jLabel13 = new JLabel();
        txtTen1 = new javax.swing.JTextField();
        jLabel14 = new JLabel();
        txtSDT1 = new javax.swing.JTextField();
        jLabel15 = new JLabel();
        cboGioiTinh1 = new javax.swing.JComboBox<>();
        jLabel16 = new JLabel();
        cboChucVu1 = new javax.swing.JComboBox<>();
        btnTimKiem = new JButton();
        Buttons = new javax.swing.JPanel();
        btnSua = new JButton();
        btnImport = new JButton();
        btnExport = new JButton();
        btnThem = new JButton();
        btnNghiLam = new JButton();
        jScrollPane1 = new JScrollPane();
        tblNhanVien = new JTable();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 515, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new Color(15, 145, 239));
        jLabel1.setText("Quản lý nhân viên");

        Left.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin nhân viên"));
        Left.setToolTipText("");

        jLabel3.setText("Mã nhân viên:");

        txtMa.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtMaActionPerformed(evt);
            }
        });

        jLabel2.setText("Tài Khoản: ");

        txtTaiKhoan.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTaiKhoanActionPerformed(evt);
            }
        });

        jLabel4.setText("Họ và tên: ");

        txtTen.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTenActionPerformed(evt);
            }
        });

        jLabel5.setText("Mật khẩu");

        txtEmail.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel6.setText("Số điện thoại");

        txtSDT.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtSDTActionPerformed(evt);
            }
        });

        jLabel7.setText("Email :");

        jLabel8.setText("Địa chỉ");

        txtDiaChi.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtDiaChiActionPerformed(evt);
            }
        });

        jLabel9.setText("Ngày sinh");

        jLabel10.setText("Giới tính");

        jLabel11.setText("Chức vụ :");

        cboGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));
        cboGioiTinh.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cboGioiTinhActionPerformed(evt);
            }
        });

        cboChucVu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nhân viên bán hàng", "Người quản lý" }));
        cboChucVu.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cboChucVuActionPerformed(evt);
            }
        });

        btnXoaRong.setBackground(new Color(255, 51, 51));
        btnXoaRong.setForeground(new Color(255, 255, 255));
        btnXoaRong.setText("Xoá rỗng");
        btnXoaRong.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnXoaRongActionPerformed(evt);
            }
        });

        btnHienThiBang.setBackground(new Color(15, 145, 239));
        btnHienThiBang.setForeground(new Color(255, 255, 255));
        btnHienThiBang.setText("Hiển Thị Bảng");
        btnHienThiBang.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnHienThiBangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LeftLayout = new javax.swing.GroupLayout(Left);
        Left.setLayout(LeftLayout);
        LeftLayout.setHorizontalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtTaiKhoan)
                    .addComponent(txtMa)
                    .addComponent(txtSDT)
                    .addComponent(txtDiaChi)
                    .addComponent(cboGioiTinh, 0, 214, Short.MAX_VALUE))
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboChucVu, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNgay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmail)
                            .addComponent(txtMatKhau)
                            .addGroup(LeftLayout.createSequentialGroup()
                                .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LeftLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHienThiBang)
                        .addGap(59, 59, 59)
                        .addComponent(btnXoaRong)))
                .addGap(30, 30, 30))
        );
        LeftLayout.setVerticalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtMa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTaiKhoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtMatKhau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtNgay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboChucVu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(0, 23, Short.MAX_VALUE)
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnXoaRong)
                            .addComponent(btnHienThiBang))
                        .addContainerGap())
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        right.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm nhân viên"));

        jLabel12.setText("Mã nhân viên:");

        txtMa1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtMa1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Họ và tên: ");

        txtTen1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTen1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Số điện thoại");

        txtSDT1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtSDT1ActionPerformed(evt);
            }
        });

        jLabel15.setText("Giới tính");

        cboGioiTinh1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Nam", "Nữ" }));

        jLabel16.setText("Nhân viên");

        cboChucVu1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Nhân viên bán hàng", "Người quản lý" }));

        btnTimKiem.setBackground(new Color(15, 145, 239));
        btnTimKiem.setFont(new Font("Arial", 0, 14)); // NOI18N
        btnTimKiem.setForeground(new Color(255, 255, 255));
        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightLayout = new javax.swing.GroupLayout(right);
        right.setLayout(rightLayout);
        rightLayout.setHorizontalGroup(
            rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightLayout.createSequentialGroup()
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rightLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rightLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(rightLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(22, 22, 22)))
                        .addGap(23, 23, 23)
                        .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rightLayout.createSequentialGroup()
                                .addComponent(cboGioiTinh1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboChucVu1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(rightLayout.createSequentialGroup()
                                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSDT1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMa1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtTen1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(24, 24, 24))
        );
        rightLayout.setVerticalGroup(
            rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtMa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtTen1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtSDT1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(rightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(cboGioiTinh1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(cboChucVu1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSua.setBackground(new Color(85, 182, 83));
        btnSua.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        btnSua.setForeground(new Color(255, 255, 255));
        btnSua.setIcon(new ImageIcon(getClass().getResource("/img/icon_button/sua.png"))); // NOI18N
        btnSua.setText(" Sửa");
        btnSua.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnImport.setBackground(new Color(85, 182, 83));
        btnImport.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        btnImport.setForeground(new Color(255, 255, 255));
        btnImport.setIcon(new ImageIcon(getClass().getResource("/img/icon_button/import.png"))); // NOI18N
        btnImport.setText(" Import ");
        btnImport.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnExport.setBackground(new Color(85, 182, 83));
        btnExport.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        btnExport.setForeground(new Color(255, 255, 255));
        btnExport.setIcon(new ImageIcon(getClass().getResource("/img/icon_button/export.png"))); // NOI18N
        btnExport.setText(" Export");
        btnExport.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnThem.setBackground(new Color(85, 182, 83));
        btnThem.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        btnThem.setForeground(new Color(255, 255, 255));
        btnThem.setIcon(new ImageIcon(getClass().getResource("/img/icon_button/them.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setAlignmentX(2.0F);
        btnThem.setIconTextGap(2);
        btnThem.setMargin(new java.awt.Insets(2, 1, 5, 2));
        btnThem.setMaximumSize(new Dimension(60, 60));
        btnThem.setMinimumSize(new Dimension(60, 60));
        btnThem.setPreferredSize(new Dimension(65, 519));
        btnThem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnNghiLam.setBackground(new Color(255, 102, 102));
        btnNghiLam.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        btnNghiLam.setForeground(new Color(255, 255, 255));
        btnNghiLam.setText("Nghỉ làm");
        btnNghiLam.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnNghiLamActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ButtonsLayout = new javax.swing.GroupLayout(Buttons);
        Buttons.setLayout(ButtonsLayout);
        ButtonsLayout.setHorizontalGroup(
            ButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonsLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(ButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnThem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImport, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNghiLam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ButtonsLayout.setVerticalGroup(
            ButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonsLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNghiLam, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tblNhanVien.setAutoCreateRowSorter(true);
        tblNhanVien.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã nhân viên", "Họ tên", "Giới tính", "Số điện thoại", "Tài Khoản", "Chức vụ", "Email", "Ngày sinh", "Địa chỉ", "Ngày lập"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblNhanVien.setToolTipText("");
        tblNhanVien.setGridColor(new Color(204, 204, 204));
        tblNhanVien.setSelectionBackground(new Color(51, 153, 255));
        tblNhanVien.setShowGrid(true);
        jScrollPane1.setViewportView(tblNhanVien);
        if (tblNhanVien.getColumnModel().getColumnCount() > 0) {
            tblNhanVien.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout ContainerLayout = new javax.swing.GroupLayout(Container);
        Container.setLayout(ContainerLayout);
        ContainerLayout.setHorizontalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addGap(0, 62, Short.MAX_VALUE)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101))
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(ContainerLayout.createSequentialGroup()
                                .addComponent(Left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(right, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ContainerLayout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(15, 15, 15))))
        );
        ContainerLayout.setVerticalGroup(
            ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ContainerLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Left, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(right, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(ContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ContainerLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(Buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        add(Container, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents


    // kết thức tìm kiếm
    private void showTuBangLenForm() {
        tblNhanVien.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {

                int row = tblNhanVien.rowAtPoint(e.getPoint());
                if (row >= 0) {
                    // Lấy giá trị từ bảng và hiển thị lên các JTextField
                    txtMa.setText(tblNhanVien.getValueAt(row, 1).toString());

                    txtTen.setText(tblNhanVien.getValueAt(row, 2).toString());
                    cboGioiTinh.setSelectedIndex(ProcessingEnumDBForQuy.gioiTinhToEnum((String) tblNhanVien.getValueAt(row, 3)).equalsIgnoreCase("Nam") ? 0 : 1);
                    txtSDT.setText(tblNhanVien.getValueAt(row, 4).toString());
                    txtTaiKhoan.setText(tblNhanVien.getValueAt(row, 5).toString());
                    cboChucVu.setSelectedIndex(ProcessingEnumDBForQuy.convertNhanVienRolesToEnum(tblNhanVien.getValueAt(row, 6).toString()).equalsIgnoreCase("NGUOI_QUAN_LY") ? 1 : 0);
                    txtEmail.setText(tblNhanVien.getValueAt(row, 7).toString());
                    String ngaySinh = tblNhanVien.getValueAt(row, 8).toString();
                    try {
                        Date ngaySinh1 = dateFormat.parse(ngaySinh);
                        txtNgay.setDate(ngaySinh1);
                    } catch (Exception e2) {
                        // TODO: handle exception
                        e2.printStackTrace();
                    }
                    txtDiaChi.setText(tblNhanVien.getValueAt(row, 9).toString());
                }
            }

        });
    }

    // chức năng tìm kiếmmm
    // chức năng tìm kiếmmm
    private void btnHienThiBangActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnHienThiBangActionPerformed
        loadNhanVienTable();
    }// GEN-LAST:event_btnHienThiBangActionPerformed

    private void customizeTable() {
        // Lấy đối tượng JTableHeader của bảng tblNhanVien
        JTableHeader header = tblNhanVien.getTableHeader();
        DefaultTableCellRenderer headerTitle = new DefaultTableCellRenderer();
        // Tạo một đối tượng Color để đại diện cho màu nền
        Color headerBackgroundColor = Color.decode("#2FA1D2"); // Màu nền là màu mã hex #42d212

        // Tạo một đối tượng Color để đại diện cho màu chữ
        Color headerForegroundColor = Color.WHITE; // Màu chữ là màu trắng

        header.setBackground(headerBackgroundColor);
        header.setForeground(headerForegroundColor);
        header.setFont(new Font("arial", Font.BOLD, 12));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER); // Đặt kiểu căn giữa

        // Đặt renderer cho từng cột riêng lẻ
        for (int i = 0; i < tblNhanVien.getColumnCount(); i++) {
            tblNhanVien.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        // public boolean isCellEditable dùng để không cho phép sửa
//		 public boolean isCellEditable(int row, int column) {
//		        return false; // Make all cells non-editable
//		    }
        tblNhanVien.setCellSelectionEnabled(false);
        tblNhanVien.setRowSelectionAllowed(true);
        tblNhanVien.setColumnSelectionAllowed(false);
        tblNhanVien.setShowVerticalLines(false);
        tblNhanVien.setShowHorizontalLines(false);
    }

    private void loadNhanVienTable() {

        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ trong bảng

        NhanVien_BUS nhanVienBus = new NhanVien_BUS();
        List<NhanVien> list = nhanVienBus.getAllEmployees();

        for (int i = 0; i < list.size(); i++) {
            NhanVien nv = list.get(i);
            model.addRow(new Object[]{i + 1, nv.getNhanVienID(), nv.getHoTen(), ProcessingEnumDBForQuy.enumToGioiTinh(nv.getGioiTinh()), nv.getSoDienThoai(),
                nv.getUserName(), ProcessingEnumDBForQuy.convertEnumToNhanVienRoles(nv.getChucVu()), nv.getEmail(), nv.getNgaySinh(), nv.getDiaChi(),
                nv.getNgayTaoTK()});
        }
    }

    // chức năng tìm kiếmmm
    private void XoaRong() {
        txtMa.setText(phatSinhMaNhanVien());
        txtTaiKhoan.setText("");
        txtMatKhau.setText("");
        txtTen.setText("");
        txtSDT.setText("");
        txtEmail.setText("");
        txtDiaChi.setText("");
        txtNgay.setDate(null);

        cboChucVu.setSelectedIndex(0);
        cboGioiTinh.setSelectedIndex(0);
    }

    private void btnTimKiemActionPerformed(ActionEvent evt) {
        // Lấy thông tin từ các trường nhập liệu
        String maNhanVien = txtMa1.getText();
        String tenNhanVien = txtTen1.getText();
        String soDienThoai = txtSDT1.getText();
        String gioiTinh = (String) cboGioiTinh1.getSelectedItem();
        String chucVu = (String) cboChucVu1.getSelectedItem();

        // Gọi hàm tìm kiếm nâng cao từ lớp DAO
        List<NhanVien> resultList = nhanvienBus.findEmployeeAdvanced(maNhanVien, tenNhanVien, soDienThoai,
                gioiTinh, chucVu);

        // Ví dụ hiển thị trên bảng (sử dụng một DefaultTableModel cho bảng jTable1)
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        if (!resultList.isEmpty()) {
            model.setRowCount(0);
            for (int i = 0; i < resultList.size(); i++) {
                NhanVien nv = resultList.get(i);
                model.addRow(new Object[]{i + 1, nv.getNhanVienID(), nv.getHoTen(), ProcessingEnumDBForQuy.enumToGioiTinh(nv.getGioiTinh()),
                    nv.getSoDienThoai(), nv.getUserName(), ProcessingEnumDBForQuy.convertEnumToNhanVienRoles(nv.getChucVu()), nv.getEmail(), nv.getNgaySinh(),
                    nv.getDiaChi(), nv.getNgayTaoTK()});
            }

        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy");
        }
    }

    private void btnXoaRongActionPerformed(ActionEvent evt) {
        XoaRong();
    }

    // chức năng tìm kiếmmm
    // chức năng tìm kiếmmm
    public String phatSinhMaNhanVien() {
        try {
            int maxId = nhanvienBus.phatSinhMaNhanVien();
            String maNV = String.format("NV%04d", maxId);
            return maNV;
        } catch (Exception e) {
            System.err.println("Error generating nhanVienID: " + e.getMessage());
            return "NV0001";
        }
    }

    private boolean btnThemActionPerformed(ActionEvent evt) {// GEN-FIRST:event_btnThemActionPerformed

        if (valid()) {
            try {
                String maNV = phatSinhMaNhanVien();
                if(validTrungMa(maNV)) return false;
                String taiKhoan = txtTaiKhoan.getText();
                String matKhau = new String(txtMatKhau.getPassword());
//				java.util.Date chonNgayLapTK = txtNgayLapTK.getDate();
//				String ngayLapTK = dateFormat.format(chonNgayLapTK);
                String tenNV = txtTen.getText();
                String gioiTinh = (String) cboGioiTinh.getSelectedItem();
                String sdt = txtSDT.getText();
                String chucVu = (String) cboChucVu.getSelectedItem();
                String email = txtEmail.getText();
                Date chonNgay = txtNgay.getDate();

                String ngaySinh = dateFormat.format(chonNgay);
                String diaChi = txtDiaChi.getText();

                NhanVien newNhanVien = new NhanVien();
                newNhanVien.setNhanVienID(maNV);
                newNhanVien.setUserName(taiKhoan);
                newNhanVien.setPassword(matKhau);
                newNhanVien.setNgayTaoTK(LocalDate.now());
                newNhanVien.setHoTen(tenNV);
                newNhanVien.setGioiTinh(gioiTinh);
                newNhanVien.setSoDienThoai(sdt);
                newNhanVien.setChucVu(ProcessingEnumDBForQuy.convertNhanVienRolesToEnum(chucVu));
                newNhanVien.setEmail(email);
                newNhanVien.setNgaySinh(LocalDate.parse(ngaySinh));
                newNhanVien.setDiaChi(diaChi);

                // Sử dụng lớp BUS để thêm thông tin nhân viên
                NhanVien_BUS nhanVienBus = new NhanVien_BUS();
                if (!validTrungMa(maNV)) {
                    if (nhanVienBus.addNhanVien(newNhanVien)) {
                        JOptionPane.showMessageDialog(this, "Thên nhân viên thành công");
                        loadNhanVienTable();
                        XoaRong();
                        txtMa.setText(phatSinhMaNhanVien());
                    }
                }
            } catch (Exception e) {

                JOptionPane.showMessageDialog(this, "Lỗi các trường nhập vào..");
            }
        }
        return true;
    }

    // chức năng tìm kiếmmm
    private void btnSuaActionPerformed(ActionEvent evt) {
        // Xác nhận trước khi thực hiện hành động sửa

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn sửa?", "Xác nhận",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Lấy thông tin từ các trường nhập liệu trong giao diện
            String maNhanVien = txtMa.getText();
            String userName = txtTaiKhoan.getText();
            String password = new String(txtMatKhau.getPassword());

            Date ngayTaoTK = txtNgay.getDate();
            LocalDate ngayTaoTK1 = ngayTaoTK.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            String hoTen = txtTen.getText();
            String gioiTinh = cboGioiTinh.getSelectedItem().toString();
            String soDienThoai = txtSDT.getText();
            String chucVu = cboChucVu.getSelectedItem().toString();
            String email = txtEmail.getText();
            Date ngaySinhDate = txtNgay.getDate(); // Lấy ngày sinh từ JDateChooser
            LocalDate ngaySinh = ngaySinhDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            String diaChi = txtDiaChi.getText();

            NhanVien existingNhanVien = nhanvienBus.getNhanVienByNhanVienID(maNhanVien);
            String oldPassword = existingNhanVien.getPassword();
            if (password.isBlank()) {
                // Nếu mật khẩu trống, giữ nguyên giá trị mặc định trong CSDL

                password = oldPassword;
            }

            NhanVien nhanVien;
			try {
				nhanVien = new NhanVien(maNhanVien, userName, password, LocalDate.now(), hoTen, gioiTinh,
				        soDienThoai, ProcessingEnumDBForQuy.convertNhanVienRolesToEnum(chucVu), email, ngaySinh, diaChi);
				 boolean result = nhanvienBus.editNhanVien(nhanVien);
		            // Hiển thị thông báo kết quả
		            if (result) {
		                JOptionPane.showMessageDialog(this, "Sửa thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
		                // Cập nhật lại bảng hoặc làm những gì đó cần thiết
		                loadNhanVienTable();
		            } else {
		                JOptionPane.showMessageDialog(this, "Sửa không thành công!", "Lỗi", JOptionPane.ERROR_MESSAGE);
		            }
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

           
        }

    }

    private void btnXoaActionPerformed(ActionEvent evt) throws Exception {// GEN-FIRST:event_btnXoaActionPerformed

        // Lấy thông tin từ các trường nhập liệu trong giao diện
        String maNhanVien = txtMa.getText();

        // Kiểm tra xem người dùng đã chọn một nhân viên để xóa chưa
        if (maNhanVien.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một nhân viên để xóa.", "Thông báo",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa nhân viên này?", "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Tạo một đối tượng NhanVien với mã nhân viên để truyền vào hàm xóa
            NhanVien nhanVienXoa = new NhanVien();
            nhanVienXoa.setNhanVienID(maNhanVien);

            // Gọi hàm xóa từ lớp DAO
            boolean result = false; //nhanvienBus.deleteNhanVien(nhanVienXoa);

            // Hiển thị thông báo kết quả
            if (result) {
                JOptionPane.showMessageDialog(this, "Xóa thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                // Cập nhật lại bảng hoặc làm những gì đó cần thiết
                loadNhanVienTable();
            } else {
                JOptionPane.showMessageDialog(this, "Không thể xoá nhân viên đang phân công!", "Lỗi",
                        JOptionPane.ERROR_MESSAGE);
            }
        }

    }

    private void btnImportActionPerformed(ActionEvent evt) {
        try {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Files", "xlsx");
            fileChooser.setFileFilter(filter);

            int returnVal = fileChooser.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                List<NhanVien> importedList = readEmployeeDataFromExcel(file);

                if (importedList.isEmpty()) {
                    return; // Đã hiển thị lỗi trong readEmployeeDataFromExcel
                }

                NhanVien_BUS nhanVienBus = new NhanVien_BUS();
                int successCount = 0;

                // Thêm dữ liệu vào cơ sở dữ liệu
                for (NhanVien nhanVien : importedList) {
                    if (nhanVienBus.isMaNhanVienExists(nhanVien.getNhanVienID())) {
                        JOptionPane.showMessageDialog(this, "Mã nhân viên " + nhanVien.getNhanVienID() + " đã tồn tại, bỏ qua.");
                        continue;
                    }
                    if (nhanVienBus.addNhanVien(nhanVien)) {
                        successCount++;
                    } else {
                        JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhân viên với mã " + nhanVien.getNhanVienID());
                    }
                }

                loadNhanVienTable();
                JOptionPane.showMessageDialog(this, "Đã thêm thành công " + successCount + "/" + importedList.size() + " nhân viên.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc dữ liệu từ file Excel: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public List<NhanVien> readEmployeeDataFromExcel(File file) {
        List<NhanVien> employeeList = new ArrayList<>();
        List<String> errors = new ArrayList<>();
        int sttColumnIndex = 0;
        int maNhanVienColumnIndex = -1;

        try (FileInputStream fis = new FileInputStream(file); Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = sheet.iterator();

            // Bỏ qua dòng tiêu đề và xác định vị trí cột
            if (iterator.hasNext()) {
                Row headerRow = iterator.next();
                for (Cell cell : headerRow) {
                    String cellValue = getStringValue(cell);
                    if (cellValue != null && cellValue.equalsIgnoreCase("STT")) {
                        sttColumnIndex = cell.getColumnIndex();
                    } else if (cellValue.equalsIgnoreCase("MÃ NHÂN VIÊN")) {
                        maNhanVienColumnIndex = cell.getColumnIndex();
                    }
                }
            }

            // Đếm số hàng hợp lệ để sinh mã trước
            int validRows = 0;
            Iterator<Row> tempIterator = sheet.iterator();
            if (tempIterator.hasNext()) tempIterator.next(); // Bỏ qua tiêu đề
            while (tempIterator.hasNext()) {
                Row row = tempIterator.next();
                if (row.getLastCellNum() >= 10) validRows++;
            }

            // Sinh danh sách mã duy nhất
            List<String> maNhanVienList = new ArrayList<>();
            int startNum = nhanvienBus.phatSinhMaNhanVien();
            for (int i = 0; i < validRows; i++) {
                String maNV = String.format("NV%04d", startNum + i);
                maNhanVienList.add(maNV);
            }

            // Đọc dữ liệu và tạo đối tượng NhanVien
            int maIndex = 0;
            iterator = sheet.iterator();
            if (iterator.hasNext()) iterator.next(); // Bỏ qua tiêu đề
            while (iterator.hasNext() && maIndex < maNhanVienList.size()) {
                Row currentRow = iterator.next();
                int cellCount = currentRow.getLastCellNum();
                if (cellCount < 10) {
                    errors.add("Hàng " + (currentRow.getRowNum() + 1) + ": Không đủ cột dữ liệu (yêu cầu ít nhất 10 cột).");
                    continue;
                }

                // Đọc dữ liệu từ các cột bằng cách truy cập trực tiếp theo chỉ số
                int currentIndex = sttColumnIndex + 1; // Bỏ qua cột STT
                Cell cellMaNV = currentRow.getCell(currentIndex++); // Cột 2: Mã nhân viên (không dùng)
                Cell cellTenNV = currentRow.getCell(currentIndex++); // Cột 3: Tên nhân viên
                Cell cellGioiTinh = currentRow.getCell(currentIndex++); // Cột 4: Giới tính
                Cell cellSdtNV = currentRow.getCell(currentIndex++); // Cột 5: Số điện thoại
                Cell cellTaiKhoan = currentRow.getCell(currentIndex++); // Cột 6: Tài khoản
                Cell cellChucVu = currentRow.getCell(currentIndex++); // Cột 7: Chức vụ
                Cell cellEmail = currentRow.getCell(currentIndex++); // Cột 8: Email
                Cell cellNgaySinh = currentRow.getCell(currentIndex++); // Cột 9: Ngày sinh
                Cell cellDiaChi = currentRow.getCell(currentIndex++); // Cột 10: Địa chỉ

                // Kiểm tra và lấy giá trị từ các ô
                String maNV = cellMaNV != null ? getStringValue(cellMaNV) : "";
                String tenNV = cellTenNV != null ? getStringValue(cellTenNV) : "";
                String gioiTinh = cellGioiTinh != null ? getStringValue(cellGioiTinh) : "";
                String sdtNV = cellSdtNV != null ? getStringValue(cellSdtNV) : "";
                String taiKhoan = cellTaiKhoan != null ? getStringValue(cellTaiKhoan) : "";
                String chucVu = cellChucVu != null ? getStringValue(cellChucVu) : "";
                String email = cellEmail != null ? getStringValue(cellEmail) : "";
                String ngaySinh = cellNgaySinh != null ? getStringValue(cellNgaySinh) : "";
                String diaChi = cellDiaChi != null ? getStringValue(cellDiaChi) : "";

                // Kiểm tra dữ liệu trống
                if (tenNV.isEmpty() || gioiTinh.isEmpty() || sdtNV.isEmpty() || taiKhoan.isEmpty() || chucVu.isEmpty() || email.isEmpty() || ngaySinh.isEmpty() || diaChi.isEmpty()) {
                    errors.add("Hàng " + (currentRow.getRowNum() + 1) + ": Có dữ liệu trống.");
                    continue;
                }

                LocalDate ngayht = LocalDate.now();
                try {
                    // Kiểm tra định dạng ngày trước khi parse
                    if (!ngaySinh.matches("\\d{4}-\\d{2}-\\d{2}")) {
                        errors.add("Hàng " + (currentRow.getRowNum() + 1) + ": Ngày sinh '" + ngaySinh + "' không đúng định dạng yyyy-MM-dd.");
                        continue;
                    }
                    LocalDate ngaySinhDate = LocalDate.parse(ngaySinh, DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                    NhanVien nhanVien = new NhanVien(maNhanVienList.get(maIndex), taiKhoan, "123456", ngayht, tenNV, gioiTinh,
                            sdtNV, ProcessingEnumDBForQuy.convertNhanVienRolesToEnum(chucVu), email, ngaySinhDate, diaChi);
                    employeeList.add(nhanVien);
                    maIndex++;
                } catch (Exception e) {
                    errors.add("Hàng " + (currentRow.getRowNum() + 1) + ": Lỗi dữ liệu - " + e.getMessage());
                    continue;
                }
            }
        } catch (Exception e) {
            errors.add("Lỗi khi đọc dữ liệu từ file Excel: " + e.getMessage());
            e.printStackTrace();
        }

        // Hiển thị tất cả lỗi (nếu có)
        if (!errors.isEmpty()) {
            JOptionPane.showMessageDialog(this, String.join("\n", errors), "Lỗi dữ liệu", JOptionPane.ERROR_MESSAGE);
        }

        // Thông báo kết quả
        if (employeeList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không có dữ liệu hợp lệ nào được đọc từ file Excel.");
        } else {
            JOptionPane.showMessageDialog(this, "Đã đọc được " + employeeList.size() + " nhân viên từ file Excel.");
        }

        return employeeList;
    }

    // chức năng tìm kiếmmm
    private String getStringValue(Cell cell) {
        if (cell == null) {
            return "";
        }
        // Sử dụng DataFormatter để lấy giá trị dưới dạng chuỗi giống như hiển thị trong Excel
        org.apache.poi.ss.usermodel.DataFormatter formatter = new org.apache.poi.ss.usermodel.DataFormatter();
        return formatter.formatCellValue(cell);
    }

        private void btnExportActionPerformed(ActionEvent evt) {
        List<NhanVien> list = nhanvienBus.getAllEmployees();
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Chọn nơi lưu trữ file Excel");
            fileChooser.setFileFilter(new FileNameExtensionFilter("Excel Files", "xlsx"));

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                String filePath = fileToSave.getAbsolutePath();

                // Kiểm tra và thêm đuôi .xlsx nếu chưa có
                if (!filePath.toLowerCase().endsWith(".xlsx")) {
                    filePath = filePath + ".xlsx";
                    fileToSave = new File(filePath);
                }

                XSSFWorkbook workBook = new XSSFWorkbook();
                XSSFSheet sheet = workBook.createSheet("Danh sách nhân viên");
                XSSFRow row = null;
                Cell cell = null;
                XSSFCellStyle headerStyle = workBook.createCellStyle();
                headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
                headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
                row = sheet.createRow(0);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");
                cell.setCellStyle(headerStyle);
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Mã nhân viên");
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Tên nhân viên");
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Giới tính");
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Số điện thoại");
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Tài Khoản");
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Chức vụ");
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Email");
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Ngày sinh");
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Địa chỉ");

                for (int i = 0; i < list.size(); i++) {
                    row = sheet.createRow(1 + i);
                    cell = row.createCell(0, CellType.NUMERIC);
                    cell.setCellValue(i + 1);
                    cell = row.createCell(1, CellType.STRING);
                    cell.setCellValue(list.get(i).getNhanVienID());
                    cell = row.createCell(2, CellType.STRING);
                    cell.setCellValue(list.get(i).getHoTen());
                    cell = row.createCell(3, CellType.STRING);
                    cell.setCellValue(list.get(i).getGioiTinh());
                    cell = row.createCell(4, CellType.STRING);
                    cell.setCellValue(list.get(i).getSoDienThoai());
                    cell = row.createCell(5, CellType.STRING);
                    cell.setCellValue(list.get(i).getUserName());
                    cell = row.createCell(6, CellType.STRING);
                    cell.setCellValue(ProcessingEnumDBForQuy.convertEnumToNhanVienRoles(list.get(i).getChucVu()));
                    cell = row.createCell(7, CellType.STRING);
                    cell.setCellValue(list.get(i).getEmail());
                    cell = row.createCell(8, CellType.STRING);
                    cell.setCellValue(list.get(i).getNgaySinh().toString());
                    cell = row.createCell(9, CellType.STRING);
                    cell.setCellValue(list.get(i).getDiaChi());
                }
                FileOutputStream fis = new FileOutputStream(fileToSave);
                workBook.write(fis);
                fis.close();

                JOptionPane.showMessageDialog(this, "In thành công " + filePath);
            } else {
                JOptionPane.showMessageDialog(this, "In thất bại. Không chọn nơi lưu trữ.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi in file: " + e.getMessage());
        }
    }

    private void phimTat() {
        // Thiết lập phím tắt cho nút btnTimKiem
        InputMap inputMap = btnTimKiem.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = btnTimKiem.getActionMap();

        KeyStroke enterKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        inputMap.put(enterKey, "performClick");

        actionMap.put("performClick", new AbstractAction() {
            public void actionPerformed(ActionEvent evt) {
                btnTimKiem.doClick();
            }
        });
    }

    private void btnNghiLamActionPerformed(ActionEvent evt) {
        NhanVien_BUS nhanVienBus = new NhanVien_BUS();
        int selectedRow = tblNhanVien.getSelectedRow();

        try {
            String maNhanVien = tblNhanVien.getValueAt(selectedRow, 1).toString();
            String tenNhanVien = tblNhanVien.getValueAt(selectedRow, 2).toString();
            int confirm = JOptionPane.showConfirmDialog(this, "Bạn có muốn nhân viên này nghỉ làm chứ ?", "Xác nhận",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                if (nhanVienBus.chuyenChucVuNhanVienCu(maNhanVien)) {
                    JOptionPane.showMessageDialog(this,
                            "Nhân viên " + tenNhanVien + " đã được cho nghỉ!");
                    loadNhanVienTable();
                } else {
                    JOptionPane.showMessageDialog(this, "Không thể chuyển chức vụ cho nhân viên " + tenNhanVien);
                }
            }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, "Vui lòng hãy chọn vào1 ");
        }
    }

    private void txtTenActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtTenActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtTenActionPerformed

    private void txtMaActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtMaActionPerformed

    }// GEN-LAST:event_txtMaActionPerformed

    private void txtEmailActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtEmailActionPerformed

    private void txtSDTActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtSDTActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtSDTActionPerformed

    private void txtMatKhauActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtMatKhauActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtMatKhauActionPerformed

    private void txtTaiKhoanActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtTaiKhoanActionPerformed

    }// GEN-LAST:event_txtTaiKhoanActionPerformed

    private void txtDiaChiActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtDiaChiActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtDiaChiActionPerformed

    private void cboGioiTinhActionPerformed(ActionEvent evt) {// GEN-FIRST:event_cboGioiTinhActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cboGioiTinhActionPerformed

    private void txtMa1ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtMa1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtMa1ActionPerformed

    private void txtTen1ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtTen1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtTen1ActionPerformed

    private void txtSDT1ActionPerformed(ActionEvent evt) {// GEN-FIRST:event_txtSDT1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_txtSDT1ActionPerformed

//	chức năng tìm kiếmmm
    private void cboChucVuActionPerformed(ActionEvent evt) {// GEN-FIRST:event_cboChucVuActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cboChucVuActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Buttons;
    private javax.swing.JPanel Container;
    private javax.swing.JPanel Left;
    private JButton btnExport;
    private JButton btnHienThiBang;
    private JButton btnImport;
    private JButton btnNghiLam;
    private JButton btnSua;
    private JButton btnThem;
    private JButton btnTimKiem;
    private JButton btnXoaRong;
    private javax.swing.JComboBox<String> cboChucVu;
    private javax.swing.JComboBox<String> cboChucVu1;
    private javax.swing.JComboBox<String> cboGioiTinh;
    private javax.swing.JComboBox<String> cboGioiTinh1;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private javax.swing.JPanel right;
    private JTable tblNhanVien;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMa;
    private javax.swing.JTextField txtMa1;
    private javax.swing.JPasswordField txtMatKhau;
    private com.toedter.calendar.JDateChooser txtNgay;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSDT1;
    private javax.swing.JTextField txtTaiKhoan;
    private javax.swing.JTextField txtTen;
    private javax.swing.JTextField txtTen1;
    // End of variables declaration//GEN-END:variables

// Kiểm tra valid
    private boolean validTrungMa(String nhanVienID) {
        NhanVien_BUS nhanVienBus = new NhanVien_BUS();
//		kiểm tra không trùng mã.
        if (nhanVienBus.isMaNhanVienExists(nhanVienID)) {
            JOptionPane.showMessageDialog(this, "Nhân viên đã tồn tại ( Mã ).");
            return true;
        }
        return false;
    }

    private boolean valid() {
        String errorMessage = "";
        String maNV = phatSinhMaNhanVien();
        String errorMessage1 = "";
//        Mã.
        if (maNV.isEmpty()) {
            errorMessage += "Mã nhân viên không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }
        if (!maNV.matches("^NV\\d{3,}$")) {
            errorMessage1 += "Lỗi mã nhân viên bắt buộc :NVXXXX";
            JOptionPane.showMessageDialog(this, errorMessage1);
            return false;
        }
        if (txtTen.getText().isEmpty()) {
            errorMessage += "Họ tên không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;

        }
        if (!txtTen.getText().matches(RegexPattern.HOTEN)) {
            errorMessage1 += "Họ tên không hợp lệ.\n";
            JOptionPane.showMessageDialog(this, errorMessage1);
            return false;

        }
        if (txtTaiKhoan.getText().isEmpty()) {
            errorMessage += "Tài khoản: không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;

        }
        if (!txtTaiKhoan.getText().matches("^[a-zA-Z0-9]{1,}$")) {
            errorMessage1 += "Tài khoản: phải gồm các ký tự a-z, A-Z, 0-9 tối thiểu 1 ký tự\n";
            JOptionPane.showMessageDialog(this, errorMessage1);
            return false;

        }
        if (txtMatKhau.getText().isEmpty()) {
            errorMessage += "Mật khẩu: không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }
        if (txtSDT.getText().isEmpty()) {
            errorMessage += "Số điện thoại không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }

        if (txtEmail.getText().isEmpty()) {
            errorMessage += "Email không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }

//		if (txtNgayLapTK.getDate() == null) {
//			errorMessage += "Ngày tạo tài khoản không được trống.\n";
//			JOptionPane.showMessageDialog(this, errorMessage);
//			return false;
//
//		}
        if (txtNgay.getDate() == null) {
            errorMessage += "Ngày sinh không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }
        if (txtDiaChi.getText().isEmpty()) {
            errorMessage += "Địa chỉ không được trống.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }
        if (cboChucVu.getSelectedIndex() == -1) {
            errorMessage += "Vui lòng chọn chức vụ.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;
        }
        if (cboGioiTinh.getSelectedIndex() == -1) {
            errorMessage += "Vui lòng chọn giới tính.\n";
            JOptionPane.showMessageDialog(this, errorMessage);
            return false;

        }
        return true;
    }

}
